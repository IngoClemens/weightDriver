// ---------------------------------------------------------------------
// weightDriverEditRBF.mel
//
// Weight Driver Version: 3.6
//
// Description:
//      Editor for the weightDriver in generic RBF mode.
//
// Input Arguments:
//      None
//
// Return Value:
//      None
// ---------------------------------------------------------------------


// ---------------------------------------------------------------------
//
// Usage:
//
//  Run by executing the following command:
//
//      weightDriverEditRBF;
//
// ---------------------------------------------------------------------


//
// Procedure Name:
//      getShape
//
// Description:
//      Return the shape node name of the weight driver.
//
// Input Arguments:
//      string node     The transform node name of the weight driver.
//
// Return Value:
//      string
//
proc string getShape( string $node )
{
    if (`nodeType $node` == "transform")
    {
        string $rel[] = `listRelatives -shapes $node`;
        return $rel[0];
    }
    return $node;
}


//
// Procedure Name:
//      getTransform
//
// Description:
//      Return the name of the transform node of the weight driver.
//
// Input Arguments:
//      string node     The shape node name of the weight driver.
//
// Return Value:
//      string
//
proc string getTransform( string $node )
{
    if (`nodeType $node` == "weightDriver")
    {
        string $rel[] = `listRelatives -parent $node`;
        return $rel[0];
    }
    return $node;
}


// ---------------------------------------------------------------------
// cleanup
// ---------------------------------------------------------------------

//
// Procedure Name:
//      weightDriverCloseRBFUI
//
// Description:
//      Close the edit window.
//
// Input Arguments:
//      None
//
// Return Value:
//      None
//
global proc weightDriverCloseRBFUI()
{
    if (`window -exists weightDriverEditRBFWin`)
        deleteUI weightDriverEditRBFWin;
}


//
// Procedure Name:
//      clearPoseItems
//
// Description:
//      Remove all pose item children from the pose data layout.
//
// Input Arguments:
//      None
//
// Return Value:
//      None
//
proc clearPoseItems()
{
    string $items[] = `scrollLayout -query -childArray wdUI_poseDataLayout`;
    for ($i in $items)
        deleteUI $i;
}


//
// Procedure Name:
//      clearAll
//
// Description:
//      Clear all fields and lists in the edit window.
//
// Input Arguments:
//      None
//
// Return Value:
//      None
//
proc clearAll()
{
    global int $gWeightDriverDriverAttrCount;
    global int $gWeightDriverDrivenAttrCount;

    $gWeightDriverDriverAttrCount = 0;
    $gWeightDriverDrivenAttrCount = 0;

    textField -edit -text "" wdUI_driverField;
    textField -edit -text "" wdUI_drivenField;

    iconTextScrollList -edit -removeAll wdUI_driverAttrList;
    iconTextScrollList -edit -removeAll wdUI_drivenAttrList;

    clearPoseItems;
}


// ---------------------------------------------------------------------
// solver option menu
// ---------------------------------------------------------------------

//
// Procedure Name:
//      buildDriverMenu
//
// Description:
//      Build the option menu for the solvers and collect all weight
//      driver nodes in the scene.
//
// Input Arguments:
//      None
//
// Return Value:
//      None
//
proc buildDriverMenu()
{
    if (`optionMenu -exists wdUI_weightDriverNodeOption`)
    {
        string $items[] = `optionMenu -query -itemListLong wdUI_weightDriverNodeOption`;
        for ($c in $items)
            deleteUI $c;
    }

    menuItem -label "New" -parent wdUI_weightDriverNodeOption;

    string $nodes[] = `ls -type weightDriver`;
    for ($n in $nodes)
    {
        if (`getAttr ($n + ".type")`)
            menuItem -label (getTransform($n)) -parent wdUI_weightDriverNodeOption;
    }

    if (!size($nodes))
        clearAll;
}


//
// Procedure Name:
//      weightDriverGetSelectedNodeOption
//
// Description:
//      Return the name of the selected node from the driver option
//      menu.
//
// Input Arguments:
//      None
//
// Return Value:
//      string
//
global proc string weightDriverGetSelectedNodeOption()
{
    string $node = `optionMenu -query -value wdUI_weightDriverNodeOption`;
    if ($node == "New")
        $node = "";
    return $node;
}


//
// Procedure Name:
//      weightDriverRefreshUI
//
// Description:
//      Rebuild the driver menu and clears all fields and lists.
//
// Input Arguments:
//      None
//
// Return Value:
//      None
//
global proc weightDriverRefreshUI()
{
    buildDriverMenu;
    clearAll;
}


// ---------------------------------------------------------------------
// window
// ---------------------------------------------------------------------

//
// Procedure Name:
//      buildEditWindow
//
// Description:
//      Build the window and controls for editing the RBF solver.
//
// Input Arguments:
//      None
//
// Return Value:
//      None
//
proc buildEditWindow()
{
    if (`window -exists weightDriverEditRBFWin`)
        deleteUI weightDriverEditRBFWin;

    window -title "Edit RBF WeightDriver" -widthHeight 700 500 weightDriverEditRBFWin;

    int $state = `optionVar -query "weightDriverAutoFillValues"`;
    menuBarLayout;
        menu -label "Settings";
            menuItem
                -label "Auto Fill Blend Shape Values"
                -checkBox $state
                -command "optionVar -iv weightDriverAutoFillValues #1";
    setParent ..;

    string $mainForm = `formLayout`;

        //-------------------
        // weight driver node
        //-------------------

        string $nodeOptionForm = `formLayout`;

            string $nodeLabel = `text -label "RBF Node" -align "left" -width 64`;
            optionMenu -changeCommand weightDriverGetData wdUI_weightDriverNodeOption;
                menuItem -label "None";
            popupMenu;
                menuItem
                    -label "Select Solver"
                    -command "if (weightDriverGetSelectedNodeOption() != \"\") \
                    select -r (weightDriverGetSelectedNodeOption());";
                menuItem -divider 1;
                menuItem
                    -label "Delete Solver"
                    -command "if (weightDriverGetSelectedNodeOption() != \"\") \
                    { select -r (weightDriverGetSelectedNodeOption()); delete; weightDriverRefreshUI; }";
            string $refreshButton = `button -label "Refresh" -width 60 -command weightDriverRefreshUI`;

            formLayout
                -edit

                -attachForm $nodeLabel "top" 7
                -attachForm $nodeLabel "left" 5
                -attachForm wdUI_weightDriverNodeOption "top" 5
                -attachForm $refreshButton "top" 3
                -attachForm $refreshButton "right" 5

                -attachControl wdUI_weightDriverNodeOption "left" 3 $nodeLabel
                -attachControl wdUI_weightDriverNodeOption "right" 15 $refreshButton

                $nodeOptionForm;

        setParent ..;

        string $sep1 = `separator -style "in" -height 15`;

        //-------------------
        // rbf driver & driven
        //-------------------

        string $attrForm = `formLayout -height 182`;

            string $driverLabel = `text -label "Driver" -width 60 -align "left"`;
            textField -width 100 wdUI_driverField;
            string $driverButton = `button -label "Select" -command "weightDriverGetNode driver"`;
            string $driverAttrLabel = `text -label "Attributes" -width 60 -align "left"`;
            string $driverAttrList = `iconTextScrollList -ams 1 -height 150 wdUI_driverAttrList`;
            $state = `optionVar -query "weightDriverAttributeDisplayDriver"`;
            popupMenu;
                menuItem
                    -label "Show Keyable Only"
                    -checkBox $state
                    -command "optionVar -iv weightDriverAttributeDisplayDriver #1; \
                    weightDriverListAttributes driver";

            string $drivenLabel = `text -label "Driven" -width 60 -align "left"`;
            textField -width 100 wdUI_drivenField;
            string $drivenButton = `button -label "Select" -command "weightDriverGetNode driven"`;
            string $drivenAttrLabel = `text -label "Attributes" -width 60 -align "left"`;
            string $drivenAttrList = `iconTextScrollList
                                        -allowMultiSelection 1
                                        -height 150
                                        wdUI_drivenAttrList`;
            $state = `optionVar -query "weightDriverAttributeDisplayDriven"`;
            popupMenu;
                menuItem
                    -label "Show Keyable Only"
                    -checkBox $state
                    -command "optionVar -iv weightDriverAttributeDisplayDriven #1; \
                    weightDriverListAttributes driven";

            string $div = `separator -style "in" -horizontal 0`;

            formLayout
                -edit

                -attachForm $driverLabel "top" 5
                -attachForm $driverLabel "left" 5
                -attachForm wdUI_driverField "top" 2
                -attachForm $driverButton "top" 0
                -attachForm $driverAttrLabel "left" 5

                -attachForm $div "top" 5
                -attachForm $div "bottom" 5

                -attachForm $drivenLabel "top" 5
                -attachForm wdUI_drivenField "top" 2
                -attachForm $drivenButton "top" 0
                -attachForm $drivenButton "right" 5
                -attachForm $drivenAttrList "right" 5

                -attachControl wdUI_driverField "left" 5 $driverLabel
                -attachControl wdUI_driverField "right" 5 $driverButton
                -attachControl $driverAttrLabel "top" 17 $driverLabel
                -attachControl $driverAttrList "top" 10 wdUI_driverField
                -attachControl $driverAttrList "left" 5 $driverAttrLabel

                -attachControl wdUI_drivenField "left" 5 $drivenLabel
                -attachControl wdUI_drivenField "right" 5 $drivenButton
                -attachControl $drivenAttrLabel "top" 17 $drivenLabel
                -attachControl $drivenAttrList "top" 10 wdUI_drivenField
                -attachControl $drivenAttrList "left" 5 $drivenAttrLabel

                -attachPosition $driverButton "right" 15 50
                -attachPosition $driverAttrList "right" 15 50

                -attachPosition $drivenLabel "left" 15 50
                -attachPosition $drivenAttrLabel "left" 15 50

                -attachPosition $div "left" 0 50

                $attrForm;

        setParent ..;

        string $sep2 = `separator -style "in" -height 15`;

        //-------------------
        // pose data
        //-------------------

        scrollLayout -childResizable 1 wdUI_poseDataLayout;
             ;
        setParent ..;

        string $sep3 = `separator -style "in" -height 15`;

        string $buttonAdd = `button -label "Add Pose" -height 25 -command weightDriverAddPose`;
        string $buttonApply = `button -label "Apply" -height 25 -command "weightDriverApply 0"`;
        string $buttonConnect = `button -label "Connect" -height 25 -command "weightDriverApply 1"`;
        string $buttonCancel = `button -label "Close" -height 25 -command weightDriverCloseRBFUI`;

        formLayout
            -edit

            -attachForm $nodeOptionForm "top" 5
            -attachForm $nodeOptionForm "left" 5
            -attachForm $nodeOptionForm "right" 5
            -attachForm $sep1 "left" 10
            -attachForm $sep1 "right" 10
            -attachForm $attrForm "left" 5
            -attachForm $attrForm "right" 5
            -attachForm $sep2 "left" 10
            -attachForm $sep2 "right" 10
            -attachForm wdUI_poseDataLayout "left" 10
            -attachForm wdUI_poseDataLayout "right" 10
            -attachForm $sep3 "left" 10
            -attachForm $sep3 "right" 10
            -attachForm $buttonAdd "left" 5
            -attachForm $buttonAdd "bottom" 5
            -attachForm $buttonApply "bottom" 5
            -attachForm $buttonConnect "bottom" 5
            -attachForm $buttonCancel "right" 5
            -attachForm $buttonCancel "bottom" 5

            -attachControl $sep1 "top" 0 $nodeOptionForm
            -attachControl $attrForm "top" 0 $sep1
            -attachControl $sep2 "top" 0 $attrForm
            -attachControl wdUI_poseDataLayout "top" 0 $sep2
            -attachControl wdUI_poseDataLayout "bottom" 10 $sep3
            -attachControl $sep3 "bottom" 0 $buttonApply

            -attachPosition $buttonAdd "right" 5 25
            -attachPosition $buttonApply "left" 5 25
            -attachPosition $buttonApply "right" 5 50
            -attachPosition $buttonConnect "left" 5 50
            -attachPosition $buttonConnect "right" 5 75
            -attachPosition $buttonCancel "left" 5 75

            $mainForm;

    setParent ..;

    showWindow weightDriverEditRBFWin;

    buildDriverMenu;
}


// ---------------------------------------------------------------------
// get the data from an existing setup
// ---------------------------------------------------------------------

//
// Procedure Name:
//      readPoseData
//
// Description:
//      Populate all fields based on the current solver selection.
//
// Input Arguments:
//      string node         The name of the solver.
//      int id              The index of the pose to get the data from.
//
// Return Value:
//      None
//
proc readPoseData( string $node, int $id )
{
    setParent wdUI_poseDataLayout;

    int $attrSize = `getAttr -size ($node + ".input")`;
    int $valSize =  `getAttr -size ($node + ".output")`;

    if ($attrSize == 0 || $valSize == 0)
        return;

    rowLayout -numberOfColumns ($attrSize + $valSize + 7) ("wdUI_poseData_" + $id + "_row");

        text -label ("Pose " + $id) -width 60 -align "left";
        for ($i = 0; $i < $attrSize; $i ++)
        {
            float $v = `getAttr ($node + ".poses[" + $id + "].poseInput[" + $i + "]")`;
            floatField -precision 3 -value $v ("wdUI_poseData_" + $id + "_a" + $i);
        }
        separator -style "in" -horizontal 0 -width 25 -height 20;
        for ($i = 0; $i < $valSize; $i ++)
        {
            float $v = `getAttr ($node + ".poses[" + $id + "].poseValue[" + $i + "]")`;
            floatField -precision 3 -value $v ("wdUI_poseData_" + $id + "_v" + $i);
        }
        separator -style "none" -width 10;
        button -label "Recall" -width 50 -command ("weightDriverRecallPose " + $id);
        separator -style "none" -width 10;
        //button -label "Update" -width 50 -command ("weightDriverUpdatePose " + $id);
        separator -style "none" -width 77;
        button -label "Delete" -command ("deleteUI wdUI_poseData_" + $id + "_row");

    setParent ..;
}


//
// Procedure Name:
//      weightDriverGetData
//
// Description:
//      Get the driver and driven nodes for the current solver and
//      gather the attributes and pose values to populate the ui.
//
// Input Arguments:
//      None
//
// Return Value:
//      None
//
global proc weightDriverGetData()
{
    global int $gWeightDriverDriverAttrCount;
    global int $gWeightDriverDrivenAttrCount;

    clearAll;

    string $node = weightDriverGetSelectedNodeOption();
    if ($node == "")
        return;

    $node = getShape($node);

    // driver
    string $input[] = `listConnections
                            -source 1
                            -destination 0
                            -plugs 1
                            -connections 1
                            -skipConversionNodes 1
                            ($node + ".input")`;
    string $driver;
    string $driverAttrs[];
    for ($i = 0; $i < size($input); $i += 2)
    {
        string $items[] = stringToStringArray($input[$i + 1], ".");
        if ($driver == "")
            $driver = $items[0];
        $driverAttrs[size($driverAttrs)] = $items[1];
    }
    $gWeightDriverDriverAttrCount = size($driverAttrs);

    textField -edit -text $driver wdUI_driverField;

    string $listItems[] = weightDriverListAttributes("driver");
    for ($a in $driverAttrs)
    {
        if (stringArrayContains($a, $listItems))
            iconTextScrollList -edit -selectItem $a wdUI_driverAttrList;
    }

    // driven
    string $output[] = `listConnections
                            -source 0
                            -destination 1
                            -plugs 1
                            -connections 1
                            -skipConversionNodes 1
                            ($node + ".output")`;
    string $driven;
    string $drivenAttrs[];
    for ($i = 0; $i < size($output); $i += 2)
    {
        string $items[] = stringToStringArray($output[$i + 1], ".");
        if ($driven == "")
            $driven = $items[0];
        $drivenAttrs[size($drivenAttrs)] = $items[1];
    }
    $gWeightDriverDrivenAttrCount = size($drivenAttrs);

    textField -edit -text $driven wdUI_drivenField;

    $listItems = weightDriverListAttributes("driven");
    for ($a in $drivenAttrs)
    {
        if (stringArrayContains($a, $listItems))
            iconTextScrollList -edit -selectItem $a wdUI_drivenAttrList;
    }

    // poses
    int $poseIds[] = `getAttr -multiIndices ($node + ".poses")`;
    if ($poseIds[0] != 0)
    {
        setAttr ($node + ".poses[0].poseInput[0]") 0;
        setAttr ($node + ".poses[0].poseValue[0]") 0;
        $poseIds = `getAttr -multiIndices ($node + ".poses")`;
    }
    for ($id in $poseIds)
        readPoseData $node $id;
}


// ---------------------------------------------------------------------
// attribute lists
// ---------------------------------------------------------------------

//
// Procedure Name:
//      weightDriverGetNode
//
// Description:
//      Load the selected node from the scene as either a driver or
//      driven node and list the attributes.
//
// Input Arguments:
//      string type         The type of which the node should be loaded
//                          as. Use "driver" or "driven".
//
// Return Value:
//      None
//
global proc weightDriverGetNode( string $type )
{
    string $sel[] = `ls -selection`;

    if (!size($sel))
        return;

    if ($type == "driver")
        textField -edit -text $sel[0] wdUI_driverField;
    else
        textField -edit -text $sel[0] wdUI_drivenField;

    weightDriverListAttributes $type;
}


//
// Procedure Name:
//      weightDriverListAttributes
//
// Description:
//      List and return the attributes of the driver or driven node
//      depending on the keyable/non-keyable preference setting.
//
// Input Arguments:
//      string type         The type usage of the node.
//                          Use "driver" or "driven".
//
// Return Value:
//      string[]
//
global proc string[] weightDriverListAttributes( string $type )
{
    string $list;
    string $node;
    string $flag;

    if ($type == "driver")
    {
        $list = "wdUI_driverAttrList";
        $node = `textField -query -text wdUI_driverField`;
        if (`optionVar -query "weightDriverAttributeDisplayDriver"`)
            $flag = "-keyable ";
    }
    else
    {
        $list = "wdUI_drivenAttrList";
        $node = `textField -query -text wdUI_drivenField`;
        if (`optionVar -query "weightDriverAttributeDisplayDriven"`)
            $flag = "-keyable ";
    }

    iconTextScrollList -edit -removeAll $list;

    string $cmd = "listAttr -multi " + $flag + $node;
    string $attributes[] = eval($cmd);
    for ($a in $attributes)
        iconTextScrollList -edit -append $a $list;

    return $attributes;
}


//
// Procedure Name:
//      getSelectedNodeAttributes
//
// Description:
//      Return the selected node attributes in the list.
//
// Input Arguments:
//      string type         The type usage of the node.
//                          Use "driver" or "driven".
//
// Return Value:
//      string[]
//
proc string[] getSelectedNodeAttributes( string $type )
{
    string $list;

    if ($type == "driver")
        $list = "wdUI_driverAttrList";
    else
        $list = "wdUI_drivenAttrList";

    string $attributes[] = `iconTextScrollList -query -selectItem $list`;

    return $attributes;
}


//
// Procedure Name:
//      getAttributes
//
// Description:
//      Get the driver and driven attributes through the given string
//      arrays.
//      Also perform a check if the attribute count matches the count of
//      existing pose attributes and return it.
//
// Input Arguments:
//      string[] driverAttrs        The attribute list of all driver
//                                  attributes for the solver.
//      string[] drivenAttrs        The attribute list of all driven
//                                  attributes for the solver.
//
// Return Value:
//      int (bool)
//
proc int getAttributes( string $driverAttrs[], string $drivenAttrs[] )
{
    global int $gWeightDriverDriverAttrCount;
    global int $gWeightDriverDrivenAttrCount;

    string $driver = `textField -query -text wdUI_driverField`;
    string $driven = `textField -query -text wdUI_drivenField`;

    if ($driver == "" || $driven == "")
        return 0;

    $driverAttrs = getSelectedNodeAttributes("driver");
    if (!size($driverAttrs))
    {
        error "No driver attributes selected";
        return 0;
    }
    else
    {
        if ($gWeightDriverDriverAttrCount != 0 && $gWeightDriverDriverAttrCount != size($driverAttrs))
        {
            error "The driver attribute count is different from the already existing poses";
            return 0;
        }
        else
            $gWeightDriverDriverAttrCount = size($driverAttrs);
    }

    $drivenAttrs = getSelectedNodeAttributes("driven");
    if (!size($drivenAttrs))
    {
        error "No driven attributes selected";
        return 0;
    }
    else
    {
        if ($gWeightDriverDrivenAttrCount != 0 && $gWeightDriverDrivenAttrCount != size($drivenAttrs))
        {
            error "The driven attribute count is different from the already existing poses";
            return 0;
        }
        else
            $gWeightDriverDrivenAttrCount = size($drivenAttrs);
    }

    return 1;
}


// ---------------------------------------------------------------------
// poses
// ---------------------------------------------------------------------

//
// Procedure Name:
//      getPoseIndices
//
// Description:
//      Return a list of all pose indices.
//
// Input Arguments:
//      None
//
// Return Value:
//      int[]
//
proc int[] getPoseIndices()
{
    int $ids[];
    string $items[] = `scrollLayout -query -childArray wdUI_poseDataLayout`;
    for ($i in $items)
    {
        string $temp[] = stringToStringArray($i, "_");
        $ids[size($ids)] = $temp[size($temp) - 2];
    }
    return $ids;
}


//
// Procedure Name:
//      getNewPoseIndex
//
// Description:
//      Return a new pose index.
//
// Input Arguments:
//      None
//
// Return Value:
//      int
//
proc int getNewPoseIndex()
{
    int $ids[] = getPoseIndices();
    if (size($ids))
        return ($ids[size($ids) - 1] + 1);
    return 0;
}


//
// Procedure Name:
//      hasRestPose
//
// Description:
//      Return true if the first row is filled with zeros.
//
// Input Arguments:
//      None
//
// Return Value:
//      int (bool)
//
proc int hasRestPose()
{
    int $result = 0;

    if (`rowLayout -query -exists "wdUI_poseData_0_row"`)
    {
        float $sum = 0;
        string $items[] = `rowLayout -query -childArray "wdUI_poseData_0_row"`;
        for ($i in $items)
        {
            if (`gmatch $i "*_v*"`)
                $sum += `floatField -query -value $i`;
        }

        if ($sum == 0)
            $result = 1;
    }

    return $result;
}


//
// Procedure Name:
//      addPoseData
//
// Description:
//      Create a new row of pose data in the pose section of the ui.
//
// Input Arguments:
//      int id                  The index of the pose on the solver.
//      string[] driverAttrs    The list of driver attributes.
//      string[] drivenAttrs    The list of driven attributes.
//
// Return Value:
//      None
//
proc addPoseData( int $id, string $driverAttrs[], string $drivenAttrs[] )
{
    setParent wdUI_poseDataLayout;

    int $attrSize = size($driverAttrs);
    int $valSize = size($drivenAttrs);

    string $driver = `textField -query -text wdUI_driverField`;
    string $driven = `textField -query -text wdUI_drivenField`;

    if ($driver == "" || $driven == "")
        return;

    int $isBlendShape = 0;
    int $asRest = 0;
    int $hasRest = 0;
    if (`nodeType $driven` == "blendShape" && `optionVar -query "weightDriverAutoFillValues"`)
    {
        $isBlendShape = 1;
        $hasRest = hasRestPose();
        if (getNewPoseIndex() == 0)
        {
            string $confirm = `confirmDialog
                                    -title "WeightDriver"
                                    -message "Add the first pose as the rest pose?"
                                    -button "OK"
                                    -button "Cancel"
                                    -defaultButton "OK"
                                    -cancelButton "Cancel"
                                    -dismissString "Cancel"`;
            if ($confirm == "OK")
                $asRest = 1;
        }
    }

    rowLayout -numberOfColumns ($attrSize + $valSize + 8) ("wdUI_poseData_" + $id + "_row");

        text -label ("Pose " + $id) -width 60 -align "left";
        for ($i = 0; $i < $attrSize; $i ++)
        {
            float $v = `getAttr ($driver + "." + $driverAttrs[$i])`;
            floatField -precision 3 -value $v ("wdUI_poseData_" + $id + "_a" + $i);
        }
        separator -style "in" -horizontal 0 -width 25 -height 20;
        for ($i = 0; $i < $valSize; $i ++)
        {
            float $v = 0;
            if (!$asRest)
            {
                if (!$isBlendShape)
                    $v = `getAttr ($driven + "." + $drivenAttrs[$i])`;
                else
                {
                    int $position = $id - $hasRest;
                    if ($i == $position)
                        $v = 1;
                }
            }
            floatField -precision 3 -value $v ("wdUI_poseData_" + $id + "_v" + $i);
        }
        separator -style "none" -width 10;
        button -label "Recall" -width 50 -command ("weightDriverRecallPose " + $id);
        separator -style "none" -width 10;
        button -label "Update" -width 50 -command ("weightDriverUpdatePose " + $id);
        separator -style "none" -width 25;
        button -label "Delete" -command ("deleteUI wdUI_poseData_" + $id + "_row");

    setParent ..;
}


//
// Procedure Name:
//      weightDriverAddPose
//
// Description:
//      Create a new pose based on the scene state.
//
// Input Arguments:
//      None
//
// Return Value:
//      None
//
global proc weightDriverAddPose()
{
    string $driverAttrs[];
    string $drivenAttrs[];
    int $result = getAttributes($driverAttrs, $drivenAttrs);
    if ($result == 0)
        return;

    addPoseData(getNewPoseIndex(), $driverAttrs, $drivenAttrs);
}


//
// Procedure Name:
//      weightDriverUpdatePose
//
// Description:
//      Update the pose values based on the current scene state.
//
// Input Arguments:
//      int id          The index of the pose on the solver.
//
// Return Value:
//      None
//
global proc weightDriverUpdatePose( int $id )
{
    string $driverAttrs[];
    string $drivenAttrs[];
    int $result = getAttributes($driverAttrs, $drivenAttrs);
    if ($result == 0)
        return;

    string $driver = `textField -query -text wdUI_driverField`;
    string $driven = `textField -query -text wdUI_drivenField`;

    if ($driver == "" || $driven == "")
        return;

    for ($i = 0; $i < size($driverAttrs); $i ++)
    {
        float $v = `getAttr ($driver + "." + $driverAttrs[$i])`;
        floatField -edit -value $v ("wdUI_poseData_" + $id + "_a" + $i);
    }
    for ($i = 0; $i < size($drivenAttrs); $i ++)
    {
        float $v = `getAttr ($driven + "." + $drivenAttrs[$i])`;
        floatField -edit -value $v ("wdUI_poseData_" + $id + "_v" + $i);
    }
}


//
// Procedure Name:
//      weightDriverRecallPose
//
// Description:
//      Apply all values from the current pose to the driver and driven
//      nodes.
//
// Input Arguments:
//      int id          The index of the pose on the solver.
//
// Return Value:
//      None
//
global proc weightDriverRecallPose( int $id )
{
    string $driverAttrs[];
    string $drivenAttrs[];
    int $result = getAttributes($driverAttrs, $drivenAttrs);
    if ($result == 0)
        return;

    string $driver = `textField -query -text wdUI_driverField`;
    string $driven = `textField -query -text wdUI_drivenField`;

    if ($driver == "" || $driven == "")
        return;

    string $cmd;
    for ($i = 0; $i < size($driverAttrs); $i ++)
    {
        string $conn[] = `listConnections
                                -source 1
                                -destination 0
                                -plugs 1
                                -connections 1
                                -skipConversionNodes 1
                                ($driver + "." + $driverAttrs[$i])`;
        if (size($conn))
            $cmd += "disconnectAttr " + $conn[1] + " " + $conn[0] + ";\n";
        float $v = `floatField -query -value ("wdUI_poseData_" + $id + "_a" + $i)`;
        $cmd += "setAttr " + $driver + "." + $driverAttrs[$i] + " " + $v + ";\n";
        if (size($conn))
            $cmd += "connectAttr " + $conn[1] + " " + $conn[0] + ";\n";
    }
    for ($i = 0; $i < size($drivenAttrs); $i ++)
    {
        string $conn[] = `listConnections
                                -source 1
                                -destination 0
                                -plugs 1
                                -connections 1
                                -skipConversionNodes 1
                                ($driven + "." + $drivenAttrs[$i])`;
        if (size($conn))
            $cmd += "disconnectAttr " + $conn[1] + " " + $conn[0] + ";\n";
        float $v = `floatField -query -value ("wdUI_poseData_" + $id + "_v" + $i)`;
        $cmd += "setAttr " + $driven + "." + $drivenAttrs[$i] + " " + $v + ";\n";
        if (size($conn))
            $cmd += "connectAttr " + $conn[1] + " " + $conn[0] + ";\n";
    }
    eval$cmd;
}


// ---------------------------------------------------------------------
// creating/editing the solver node
// ---------------------------------------------------------------------

//
// Procedure Name:
//      createDriver
//
// Description:
//      Create a new weight driver RBF node.
//      Return the name of the transform node of the solver.
//
// Input Arguments:
//      None
//
// Return Value:
//      string
//
proc string createDriver()
{
    string $driver = `textField -query -text wdUI_driverField`;
    string $driven = `textField -query -text wdUI_drivenField`;

    if ($driver == "" || $driven == "")
        return "";

    string $sel[] = `ls -selection`;

    string $node = `createNode weightDriver`;
    setAttr ($node + ".type") 1;

    if (size($sel))
        select -replace $sel;

    return getTransform($node);
}


//
// Procedure Name:
//      createPoses
//
// Description:
//      Create new poses based on the current driver and driven
//      attributes.
//
// Input Arguments:
//      string node         The name of the solver's transform node.
//      int connect         Wether the attributes for the pose should
//                          only get set or connected.
//
// Return Value:
//      None
//
proc createPoses( string $node, int $connect )
{
    string $driverAttrs[];
    string $drivenAttrs[];
    int $result = getAttributes($driverAttrs, $drivenAttrs);
    if ($result == 0)
        return;

    string $driver = `textField -query -text wdUI_driverField`;
    string $driven = `textField -query -text wdUI_drivenField`;

    string $sel[];
    if ($connect)
    {
        $sel = `ls -selection`;
        if (!size($sel))
            return;
    }

    if ($driver == "" || $driven == "")
        return;

    for ($i = 0; $i < size($driverAttrs); $i ++)
        connectAttr -force ($driver + "." + $driverAttrs[$i]) ($node + ".input[" + $i + "]");

    int $ids[] = getPoseIndices();
    int $poseCount;
    if ($connect)
        $poseCount = size($sel);
    else
        $poseCount = size($ids);

    for ($p = 0; $p < $poseCount; $p ++)
    {
        if ($connect)
        {
            for ($i = 0; $i < size($driverAttrs); $i ++)
                connectAttr
                    -force
                    ($sel[$p] + "." + $driverAttrs[$i])
                    ($node + ".poses[" + $p + "].poseInput[" + $i + "]");
            for ($i = 0; $i < size($drivenAttrs); $i ++)
                connectAttr
                    -force
                    ($sel[$p] + "." + $drivenAttrs[$i])
                    ($node + ".poses[" + $p + "].poseValue[" + $i + "]");
        }
        else
        {
            int $id = $ids[$p];
            for ($i = 0; $i < size($driverAttrs); $i ++)
            {
                float $v = `floatField -query -value ("wdUI_poseData_" + $id + "_a" + $i)`;
                setAttr ($node + ".poses[" + $p + "].poseInput[" + $i + "]") $v;
            }

            for ($i = 0; $i < size($drivenAttrs); $i ++)
            {
                float $v = `floatField -query -value ("wdUI_poseData_" + $id + "_v" + $i)`;
                setAttr ($node + ".poses[" + $p + "].poseValue[" + $i + "]") $v;
            }
        }
    }

    for ($i = 0; $i < size($drivenAttrs); $i ++)
        connectAttr -force ($node + ".output[" + $i + "]") ($driven + "." + $drivenAttrs[$i]);

    setAttr ($node + ".evaluate") 0;
    setAttr ($node + ".evaluate") 1;
}


//
// Procedure Name:
//      deleteData
//
// Description:
//      Remove all array inputs of a pose as a preparation for adding
//      new poses.
//      Return the name of the transform node of the solver.
//
// Input Arguments:
//      string node         The name of the solver's transform node.
//
// Return Value:
//      string
//
proc string deleteData( string $node )
{
    //
    // remove all array inputs as a preparation
    // for adding new poses
    //
    $node = getShape($node);

    int $ids[] = `getAttr -multiIndices ($node + ".input")`;
    for ($id in $ids)
        removeMultiInstance -b 1 ($node + ".input[" + $id + "]");

    $ids = `getAttr -multiIndices ($node + ".poses")`;
    for ($id in $ids)
        removeMultiInstance -b 1 ($node + ".poses[" + $id + "]");

    $ids = `getAttr -multiIndices ($node + ".output")`;
    for ($id in $ids)
        removeMultiInstance -b 1 ($node + ".output[" + $id + "]");

    return getTransform($node);
}


//
// Procedure Name:
//      weightDriverApply
//
// Description:
//      Creates a new solver or update an existing solver.
//
// Input Arguments:
//      int connect         Defines if pose values should only be set
//                          (false) or if they should be connected to
//                          the pose attributes (true).
//
// Return Value:
//      None
//
global proc weightDriverApply( int $connect )
{
    string $sel[] = `ls -selection`;

    string $node = `optionMenu -query -value wdUI_weightDriverNodeOption`;

    if ($node == "New")
        $node = createDriver();
    else
        $node = deleteData($node);

    if ($node != "")
        createPoses($node, $connect);

    // select the new or current solver in the option menu
    buildDriverMenu;
    string $items[] = `optionMenu -query -itemListLong wdUI_weightDriverNodeOption`;
    for ($i = 0; $i < size($items); $i ++)
    {
        string $label = `menuItem -query -label $items[$i]`;
        if ($label == $node)
        {
            optionMenu -edit -select ($i + 1) wdUI_weightDriverNodeOption;
            break;
        }
    }

    weightDriverGetData;

    catchQuiet(`select -replace $sel`);
}


// ---------------------------------------------------------------------
// entry
// ---------------------------------------------------------------------

global proc weightDriverEditRBF()
{
    global int $gWeightDriverDriverAttrCount;
    global int $gWeightDriverDrivenAttrCount;

    $gWeightDriverDriverAttrCount = 0;
    $gWeightDriverDrivenAttrCount = 0;

    if (!`pluginInfo -query -loaded weightDriver`)
        loadPlugin weightDriver;

   buildEditWindow;
}

// ---------------------------------------------------------------------
// MIT License
//
// Copyright (c) 2021 Ingo Clemens, brave rabbit
// weightDriver is under the terms of the MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Author: Ingo Clemens    www.braverabbit.com
// ---------------------------------------------------------------------
